// Code generated by go-bindata.
// sources:
// templates/network-outputs.tf
// templates/network-vars.tf
// templates/network.tf
// templates/provider-vars.tf
// templates/provider.tf
// templates/resources-outputs.tf
// templates/resources-vars.tf
// templates/resources.tf
// DO NOT EDIT!

package openstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNetworkOutputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd0\xc1\x0a\x83\x30\x0c\x06\xe0\x7b\x9f\x22\x94\x1d\x36\x18\xb2\xed\xbe\x67\x29\x55\x83\x06\xa5\x29\x6d\xaa\x0c\xf1\xdd\x87\xcc\x1e\x44\x06\x8e\xdd\x1a\xf8\xfb\xf5\x6f\x38\x89\x4f\x02\x9a\x9c\x60\x70\xb6\x37\x15\xd5\x41\xc3\xa4\x00\x06\xdb\x27\x84\x27\xe8\xd3\xc4\x1e\x5d\x14\x5b\x75\xc6\xa1\x8c\x1c\x3a\x72\x8d\x89\xa9\x74\x28\x66\x78\x14\x25\xc7\x76\x1d\x8b\xe5\xfe\xac\xd5\xac\xd4\x8e\x6e\xc6\x7f\xe0\xc6\x0a\x8e\xf6\x65\xc8\x6f\xf9\x25\x4a\xf5\x31\x79\x3d\x66\xba\xa0\xfa\x4b\x55\xf2\x3b\x70\xf9\x58\xcb\x51\xce\x3f\x2e\xe3\x0a\xf7\xdb\x65\xfb\x4c\xe0\x24\x18\x0e\xb7\x5e\xe3\xd9\xfe\x8c\xb9\xfb\x3b\x00\x00\xff\xff\xb8\x06\x82\x53\xc1\x01\x00\x00")

func templatesNetworkOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkOutputsTf,
		"templates/network-outputs.tf",
	)
}

func templatesNetworkOutputsTf() (*asset, error) {
	bytes, err := templatesNetworkOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network-outputs.tf", size: 449, mode: os.FileMode(480), modTime: time.Unix(1549292040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4b\xc4\x40\x0c\x85\xef\xfd\x15\x8f\xf1\xee\xd9\xcb\xde\xbc\x08\xa2\xc2\x1e\x45\x4a\xb6\x7d\x85\xb0\x63\x66\xc8\xa4\x75\x57\xf1\xbf\x4b\x2b\xc2\x22\x82\xe4\x12\xc2\x97\xf7\xf1\xae\xa0\x56\xe7\xc0\x22\xae\x72\xc8\x6c\x5d\xf7\xb3\x22\xf1\x14\xbd\x31\x7a\x1d\x13\x3e\x3a\x60\x64\x1b\x5c\x6b\x68\x31\xec\x90\x1e\x2b\x6d\x1f\x32\x1c\xc1\x53\xd0\x4d\x32\x8c\xf1\x56\xfc\x08\x1d\x11\x05\x83\x53\x82\xf0\x32\x07\x1d\x6a\x41\x9f\x64\x20\x6a\xf1\x48\xdd\xe7\xa5\x4a\x16\xd1\x2c\x07\xcd\x1a\xe7\xfe\xbd\x18\xff\x31\x5e\xf2\x58\x79\x98\xbc\xf2\x57\xe8\x68\xad\x5f\xcf\x8d\xbe\xd0\xdb\x9f\x91\xf7\xda\x02\x65\xc2\xed\xc3\x1e\xdf\x1c\xee\x9e\x5a\xda\xc0\x49\xe6\x1c\xd8\xe1\x39\xdd\x5c\x6f\x93\x5e\x3a\x20\xce\x95\xeb\x67\xd6\xb6\xb5\xf8\x0a\x00\x00\xff\xff\xae\x05\x8e\x27\x43\x01\x00\x00")

func templatesNetworkVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkVarsTf,
		"templates/network-vars.tf",
	)
}

func templatesNetworkVarsTf() (*asset, error) {
	bytes, err := templatesNetworkVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network-vars.tf", size: 323, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6e\xc2\x30\x0c\xbe\xf7\x29\xac\xb0\xeb\xb2\x52\xb1\x23\xcf\x12\x85\xc6\x83\x88\x92\x54\x4e\x0a\x4c\xa8\xef\x3e\x25\x4d\x4b\x58\x07\xd5\x7a\xaa\x6c\xcb\xfe\xfe\xb2\x02\x83\xfe\x62\xe9\xe8\x0a\x42\x67\x3b\xaa\x11\x98\x6d\xd1\x38\x2f\xeb\xa3\x48\x4d\x6d\xf6\xe3\xaf\x38\x57\x0c\xd8\xce\xba\x03\x83\x5b\x01\x40\xb8\xd7\xd6\xc0\xf8\x6d\x81\xbd\xdd\xce\x92\xf8\x50\x17\x46\x9e\xb0\x67\x05\x40\xf8\x01\xc8\xe7\xe2\x8e\x02\x40\xaa\x93\x36\xc2\x79\xe9\x51\x74\x6d\xe8\x78\xea\x90\x15\x7d\xb1\x04\xc9\x75\x3b\x83\xfe\x8e\x28\x15\xfe\x04\xf6\x0a\x5a\x62\xa6\x55\x3e\xb9\x20\x02\x0f\x07\xb9\x56\x71\x43\xad\x15\x01\x3c\xde\x5a\x97\xbc\xe4\x6b\x5e\x7e\x54\x9b\x30\xa2\x5b\x71\x46\x72\x77\x48\x5b\xd8\xcc\x65\x99\x84\x09\x54\xa2\x38\x4d\x63\x6b\xe9\x03\xde\xd6\xda\xc6\xc1\x36\x92\x03\x70\x5e\x92\xcf\xee\x54\x65\xc9\x62\x03\x8d\x7a\x00\x50\x7d\xc6\xfb\x7d\x01\xb0\x97\x1e\x2f\xf2\x5b\xe8\x76\x06\x73\x1d\x66\xd0\xc8\x5d\x83\x42\x1d\xea\x76\xea\x0f\x5e\x00\x28\xe3\xa2\x62\x0e\x29\xf0\xc8\xe4\xfc\xd5\xe9\xa3\x73\x2b\x20\xdb\x79\xa4\x45\x0f\x87\xb1\xcc\xc3\xa1\xf0\x6f\x0f\x9f\xe8\xf8\x9e\xd6\xcd\x73\xf6\xc0\x0e\xaf\x1e\xc9\xc8\x46\x64\x59\x98\x6e\xe1\xd5\x87\xba\x88\x66\x2f\xa7\x32\x31\xd2\xc6\x23\x7d\xc9\x1a\x33\x6e\xad\xa5\x59\x3a\x9f\x52\x1a\xf7\xa8\x17\x79\x9c\xd4\xe3\x99\x76\x63\x2a\xd3\xf3\x78\xb9\x60\x7a\x42\x3c\x7b\x40\x3c\x31\xfd\x09\x00\x00\xff\xff\x73\xd9\xed\x39\x1d\x04\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 1053, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xd4\x40\x0c\x86\xef\x79\x0a\x93\x5e\x40\x45\xda\x27\xe0\x50\xf5\x84\x54\x09\x44\xc4\x39\x72\x27\x4e\x63\x76\x62\x8f\x3c\x9e\xdd\x02\xe2\xdd\x51\x92\x82\xb2\x4b\x50\x73\x4d\xbe\xff\xf3\x3f\xe3\xa9\x6e\x00\x43\xa0\x9c\x21\xa8\x5a\xc7\x82\x4e\xf9\x10\x8c\x3a\x12\x67\x8c\xb9\x3a\xa1\x31\x3e\x46\x82\x1a\x8b\x0f\x6d\xb1\x58\xc3\xcf\x0a\xa0\xa3\x1c\x8c\x93\xb3\x0a\x7c\x80\xfa\xae\xf8\x30\x45\x02\xce\x5f\x48\xba\xa4\x2c\x0e\x5f\xbf\x3c\x40\xaf\x06\x9f\x12\x49\xe3\x18\x8e\x90\x4c\x4f\xdc\x91\xc1\x5b\x95\xf8\x1d\x72\x18\x68\xa4\xdb\x41\xb3\xdf\x26\x35\x7f\x0f\x8f\xc5\xe1\xcc\x3e\x68\x71\x48\xe8\xc3\x9b\x77\x75\xf5\xab\x5a\x15\x29\x99\xac\x15\x1c\x69\xb3\xc9\x6a\x12\x27\x8a\x2c\x04\x4e\x61\x10\x0e\x18\x61\x8a\xc2\x1c\xbd\x54\x26\xcc\xf9\xac\xd6\xbd\x62\x9c\xe3\x7f\xd9\x4b\x45\xa7\x23\xb2\xec\xe9\xb5\x90\x5b\x35\x9c\x04\xc5\x77\x9d\xcd\xf4\x1b\x05\x3f\x2c\x89\x2d\x17\x4b\xa6\x50\x6c\x5b\xd4\x1c\x39\x41\xd3\x3c\xc0\x89\x8c\xfb\x97\xad\xd5\x33\xd7\x63\x89\x3e\x31\x3d\xc6\x7c\x2d\x0d\x18\xc8\xbc\xed\x39\x6e\x7b\xef\x4b\x76\x1d\xe1\xfe\x0e\x26\x6e\x31\xd3\x95\x77\x56\xde\x00\x3d\x3b\x99\x60\x04\x21\x3f\xab\x1d\xd7\x2f\x70\x35\x91\x9e\xbd\x15\xda\x75\x27\xff\x18\xa7\x0c\xb8\x82\xd1\x13\x67\x27\x83\x3e\x2a\x3a\xcb\x13\x7c\xfc\xfc\xd2\x62\xfa\xa5\x72\xf8\xa1\x42\xff\x29\xb0\x10\x7b\xe6\x2f\xe4\x9f\x5d\xfc\x0e\x00\x00\xff\xff\x77\x2a\x26\x7c\x5b\x03\x00\x00")

func templatesProviderVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderVarsTf,
		"templates/provider-vars.tf",
	)
}

func templatesProviderVarsTf() (*asset, error) {
	bytes, err := templatesProviderVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider-vars.tf", size: 859, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0e\x02\x21\x0c\x85\xe1\x3d\xa7\x68\x88\x6b\x6f\xe0\x59\x26\x0d\xd4\x48\x9c\x29\xa4\xc0\xb8\x98\x70\x77\x63\x23\x23\xd8\xe5\x9f\x2f\xaf\x26\x49\xdc\x83\x27\x01\x1b\x13\x71\x2e\xe8\x9e\x16\x0e\x03\x80\xb5\x3c\x96\x2a\x2b\x7c\xee\x06\xf6\x72\xec\x28\xd7\x5e\x9b\x35\x00\x35\x93\x2c\x8c\x1b\x4d\xe4\xac\x6a\x12\xe6\xfc\x8a\xe2\xe7\x99\x5e\x95\x14\x62\xe4\xf2\x1d\x3a\xc9\x50\x55\xf9\xb8\x61\xe0\x7f\x35\x54\x55\x81\x33\xb9\x2a\x34\xbf\xeb\x55\x89\x43\x47\x52\x96\x7b\x58\xe9\x27\x86\xd8\xac\x69\xef\x00\x00\x00\xff\xff\xdb\x3a\xa3\x7c\x17\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 279, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesOutputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4b\x6e\x84\x30\x0c\x86\xf7\x9c\x22\x42\x5d\xb3\x98\x65\xa5\x9e\xa4\xaa\x22\x03\x1e\xc6\x0c\x24\x91\xe3\xa4\xf3\x10\x77\xaf\x28\x43\x01\x4d\x5a\xf5\xb5\xb6\xbf\xef\x0f\xb6\xb1\x41\x5c\x10\x95\xd7\xb8\x87\xd0\x89\x3e\xe2\x59\x1b\xe8\x31\x57\xd7\x4c\xa9\x08\x5d\x40\xf5\xa4\xf2\x87\xab\x75\x68\xbc\x40\x75\xd4\x95\xed\x5d\x10\x1c\x5b\x1d\x10\xeb\xb8\x2b\x4a\xeb\x0f\xc5\x88\x0d\x79\x36\x64\xd9\x2c\x75\x4c\x11\xa6\xce\x5f\xf8\x56\xf4\x90\x67\x4a\x79\x34\x9e\x84\xe2\x28\x10\x0e\xb8\x4e\xc2\x93\x20\x1b\xe8\x34\xb9\x2f\x92\x0c\xca\xab\xe5\x23\x99\x46\xef\x3b\x0b\x42\xa6\x21\x37\xe6\xb5\x65\x01\x75\xcd\xe8\xfd\xf6\x03\x62\xef\xb5\xc7\x2a\x30\xc9\x59\x37\x6c\x83\xf3\x5b\xfd\xf3\x67\x7e\x8f\xd5\x7b\xff\x68\x8f\xbd\xbf\x0d\xe7\x65\x2d\x6f\x43\xef\x4a\x7b\xd2\x7a\x9e\xfd\xdf\x93\xda\x32\x15\x54\x13\x63\x25\x96\xff\x33\x69\xb5\xf1\x4d\x16\x04\x39\xe8\xc0\x5d\xae\xae\xeb\x1d\x44\xe0\x62\x2e\x0d\xb9\x1a\x96\xfe\x4b\xaa\x33\x02\x75\x50\x52\x37\x3e\xf1\x62\x0d\x6e\x90\xe5\x6d\x8e\x6d\x8b\x95\x24\x0c\x82\x06\x8c\xe8\xe9\x81\x49\xb6\xb6\x3d\x90\x49\xa0\x53\xe1\x1e\x65\x6c\xc8\xa6\x80\xa9\xb0\x00\xcb\x51\x9a\xa8\xa9\x4e\x10\x53\x61\x63\xff\xd8\xd1\xed\xe7\xfb\x06\x32\xdf\xcf\xfd\xb4\x7f\x76\xf1\x8f\xbb\xdd\xa8\x7d\x0b\x00\x00\xff\xff\xf4\x77\x9e\xfe\x0a\x04\x00\x00")

func templatesResourcesOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesOutputsTf,
		"templates/resources-outputs.tf",
	)
}

func templatesResourcesOutputsTf() (*asset, error) {
	bytes, err := templatesResourcesOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-outputs.tf", size: 1034, mode: os.FileMode(480), modTime: time.Unix(1549295326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\xd1\xa9\x83\x40\x10\x85\xe1\xf7\xad\xe2\xb0\x7d\xdc\xb7\xdb\xc7\x32\xea\xac\x1e\x30\x2a\x3b\x33\x26\x41\xec\x3d\x44\x12\x52\xc0\xf7\xff\xbb\x34\x4a\x37\x2b\xb2\x69\x1f\x8d\xfe\x2c\x63\x5b\x63\x2b\x16\xb5\xf2\x91\x71\x24\x60\x50\xeb\x1b\x37\xe7\xba\xe0\x0f\xf9\x9f\x26\xb7\x8e\x63\x88\x2b\xbe\x0c\x17\x33\xdc\xe9\x13\x7c\xa2\xe1\x53\xb8\x7c\x95\x98\xfd\x6d\x73\x3a\x53\xfa\x4d\x75\xd9\x0b\x87\x8c\xe3\x4c\xaf\x00\x00\x00\xff\xff\x04\x94\xbf\xe4\x8a\x00\x00\x00")

func templatesResourcesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesVarsTf,
		"templates/resources-vars.tf",
	)
}

func templatesResourcesVarsTf() (*asset, error) {
	bytes, err := templatesResourcesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-vars.tf", size: 138, mode: os.FileMode(480), modTime: time.Unix(1549194381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x4f\xdb\x3e\x14\x7d\xef\xa7\xb8\x0a\xbf\x87\xdf\x1e\xe8\x58\x49\x69\x5f\x78\x28\x20\x01\x93\x60\x68\x85\x69\x6f\x51\xfe\xdc\x06\xd3\xc4\xb6\x6c\x27\x6b\x84\xf8\xee\x93\xe3\x04\x46\x31\x90\x86\x8d\xb4\xd3\xda\x97\xf6\xfa\xe6\xfa\xe4\x9c\x7b\x12\xdb\x5b\x30\xc7\x02\xb8\x4f\x84\xec\x09\x94\x2c\x13\x21\x82\xc3\x38\x52\xa9\xfc\x70\xee\x85\x2c\xe5\x99\x42\x6f\x8e\x85\x4e\xf2\xf2\x81\x03\x4e\xc0\xe4\xb5\x03\xb7\x3d\x00\x81\x31\x61\x14\xf4\x67\x1f\x9c\xff\x6e\x73\x5f\xf4\x4d\xcc\xa3\x7e\x8a\x77\x4e\x0f\x40\xff\x00\xa8\x73\xf4\xb5\xdb\x26\x51\x21\xf5\xa9\xaa\x13\xef\x7a\xbd\x2d\x98\x25\xcc\x57\x84\xc6\x40\xb8\x1d\x0f\x45\xf5\x83\x89\x39\xa1\xb1\x57\xe7\x12\x6e\x50\xdd\x04\x8f\x30\x3d\x8b\x87\x33\x96\xfc\x8a\x17\x17\x4a\x97\x7d\x84\x43\x62\x98\x09\xa2\x0a\x88\x05\xcb\x5e\x87\x22\x31\x2c\x13\x57\x03\x52\x12\xb3\xaf\xf3\xcd\x78\x3d\xa9\x67\x6a\xc9\x6c\x36\x23\x8b\x32\x33\x42\x19\x0a\xc2\x55\x55\xee\x73\x96\xf2\x80\x2d\x60\x5a\xa3\x3c\xd6\x17\x68\xe8\x4d\x71\x8a\x2c\xc1\x1a\xac\xf9\xf3\xc9\x60\x5e\x9a\x69\x42\x0b\x46\x11\x14\x83\xfb\x39\xa7\x27\x4e\x83\x7b\x8b\x88\xc0\xb0\xae\x42\x68\x2c\x50\x4a\x1d\x47\x75\x8d\x42\x15\xbc\xbc\xf1\xd3\x8b\xdc\x2d\x15\x11\x4c\xb1\x90\x25\x3a\xa6\x42\x6e\x44\x12\xca\x13\x3e\x8d\xd1\x4b\x89\x2e\x32\x18\x2c\x45\xfd\x45\x1d\x15\x98\x32\x85\x1e\xe1\x1e\x17\x38\x23\x3a\xee\xec\xf4\xcb\xef\xc7\x1d\x5d\x6c\x89\x58\x12\x19\xdc\xaf\x49\xd9\xbf\x09\xfa\x24\xba\x7b\x1b\xaf\x83\x86\xbc\x4e\x62\xa4\x0a\xfe\x9f\x31\x01\xda\x22\x10\x0a\xf4\x15\x6e\x23\xcd\x61\x3b\x82\x1b\x93\xf5\xa1\x13\xea\xf7\xc6\x7b\x63\x1b\xf9\x55\xfc\x1d\xe8\x5f\xcd\x7f\x0f\x8f\xa7\x25\xd6\x0f\xbe\x4c\x4f\xe0\xa8\xa4\x87\x89\x27\xee\x69\x6e\x58\x3d\xc1\xcb\x96\x6d\xd3\x31\xba\xea\x4b\x5e\xac\x3b\x45\xb1\x87\x7b\x38\x3f\x3e\x3d\xff\xde\x8d\x1f\x87\xc3\xe1\xd0\x6a\xc9\x6a\xa0\x6a\x8b\x96\x9a\xb7\xef\x1a\x4d\x63\x7b\xdb\x3e\x88\x60\x37\xae\x4d\x84\xb3\x83\xab\xe9\x1a\x1b\x73\x63\x15\xd8\x6d\xac\xc0\xfa\xbe\x94\x36\x96\x7c\xb7\x31\xf9\x57\x93\x49\x27\xe4\x8f\x5d\x77\xd7\x46\x7f\x15\xdf\x74\x01\x86\x8d\x05\x38\x14\x18\x5d\x67\x41\x37\x22\x8c\x5d\xd7\x2a\x82\x89\x6f\xba\x08\x7b\xcf\xaf\x23\x22\xe4\x09\x2b\x30\x82\x6f\x67\xf2\xf1\x3b\x79\x72\xd9\xcd\xeb\xc0\x1d\xd8\x9f\x47\x55\xbc\x9d\x16\x79\x2a\xd7\x45\x8c\x51\x0b\x31\xbe\x62\x4c\xa4\x12\x45\x47\x6b\xa4\xd1\x68\x64\x5f\x23\x99\x81\x8d\x97\x64\xdc\x42\x92\x83\x84\x05\x52\x31\x81\x1d\x69\x32\x18\xee\xd8\x35\x31\x03\x6b\xa1\xc9\x6a\x1b\x9e\x3c\x95\xab\x9d\x38\xe4\xa9\x5c\xf1\xc8\xe1\xa9\xa4\xbf\xe3\xf0\x21\x4f\xe5\x4b\x3b\x1e\x6b\x1f\x3d\x0d\x5e\x1e\x5e\xbc\x47\x2b\x75\xd6\x18\xf7\x25\xde\x44\xb1\x7d\x3f\xd3\x90\xe2\xab\xa3\x3f\x4b\x71\x16\xfd\x0d\x14\xbf\xba\x61\xb1\xb8\xe8\xdf\xce\xc5\xa2\x41\xef\x67\x00\x00\x00\xff\xff\xda\x67\x48\x31\x97\x16\x00\x00")

func templatesResourcesTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesTf,
		"templates/resources.tf",
	)
}

func templatesResourcesTf() (*asset, error) {
	bytes, err := templatesResourcesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources.tf", size: 5783, mode: os.FileMode(480), modTime: time.Unix(1549277989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/network-outputs.tf": templatesNetworkOutputsTf,
	"templates/network-vars.tf": templatesNetworkVarsTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/provider-vars.tf": templatesProviderVarsTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resources-outputs.tf": templatesResourcesOutputsTf,
	"templates/resources-vars.tf": templatesResourcesVarsTf,
	"templates/resources.tf": templatesResourcesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"network-outputs.tf": &bintree{templatesNetworkOutputsTf, map[string]*bintree{}},
		"network-vars.tf": &bintree{templatesNetworkVarsTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"provider-vars.tf": &bintree{templatesProviderVarsTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resources-outputs.tf": &bintree{templatesResourcesOutputsTf, map[string]*bintree{}},
		"resources-vars.tf": &bintree{templatesResourcesVarsTf, map[string]*bintree{}},
		"resources.tf": &bintree{templatesResourcesTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

