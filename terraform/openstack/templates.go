// Code generated by go-bindata.
// sources:
// templates/network-outputs.tf
// templates/network-vars.tf
// templates/network.tf
// templates/provider-vars.tf
// templates/provider.tf
// templates/resources-outputs.tf
// templates/resources-vars.tf
// templates/resources.tf
// DO NOT EDIT!

package openstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNetworkOutputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x10\x85\xef\xfe\x0a\x91\x1e\x5a\x28\xd2\xf6\xde\x5f\x52\x8a\xb8\x3a\x75\x87\x4d\x55\x74\x66\xc3\x12\xfc\xef\xc5\x36\x39\x84\x10\x48\xd9\xdb\x3c\x78\x7e\xef\xf9\x12\x53\x66\x92\x0a\x23\x41\x89\x76\x30\x0e\x7d\x51\x72\x12\x52\x5e\xed\xc0\x20\xdf\xa5\x7a\x98\x52\x86\x58\xc9\xba\x8b\x89\x40\x63\x2a\x17\x8c\xc1\x54\x3e\x45\x20\x73\x7d\xd3\xa7\x54\xcf\xb3\xd4\xfd\x7d\x53\xa2\x09\xb1\x41\x87\xf1\x1e\x70\xb0\x04\xa3\xbd\x19\xcc\x6b\x7c\xb7\xa2\x3f\x46\x9e\xcf\x05\xad\xd1\xef\x54\xc5\xbc\x01\xf6\x8f\x9d\x53\xa5\xc7\x7f\x8e\xf1\x2c\x5f\x5f\x9e\xd6\x31\x25\x31\x41\x39\xdc\x7a\xb6\x2f\xec\x3f\xb9\xe9\xee\xe1\xcb\xf2\x40\xa6\x82\xe3\x82\x74\x33\xa1\x24\xce\x75\x1d\xf1\xb1\xbb\x39\xb8\x5f\x7f\x4f\x59\x6e\x1d\xed\x37\x34\xf5\x29\x9a\xf8\x09\x00\x00\xff\xff\x75\xd2\x6b\x9d\x27\x02\x00\x00")

func templatesNetworkOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkOutputsTf,
		"templates/network-outputs.tf",
	)
}

func templatesNetworkOutputsTf() (*asset, error) {
	bytes, err := templatesNetworkOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network-outputs.tf", size: 551, mode: os.FileMode(480), modTime: time.Unix(1549189897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4b\xc4\x40\x0c\x85\xef\xfd\x15\x8f\xf1\xee\xd9\xcb\xde\xbc\x08\xa2\xc2\x1e\x45\x4a\xb6\x7d\x85\xb0\x63\x66\xc8\xa4\x75\x57\xf1\xbf\x4b\x2b\xc2\x22\x82\xe4\x12\xc2\x97\xf7\xf1\xae\xa0\x56\xe7\xc0\x22\xae\x72\xc8\x6c\x5d\xf7\xb3\x22\xf1\x14\xbd\x31\x7a\x1d\x13\x3e\x3a\x60\x64\x1b\x5c\x6b\x68\x31\xec\x90\x1e\x2b\x6d\x1f\x32\x1c\xc1\x53\xd0\x4d\x32\x8c\xf1\x56\xfc\x08\x1d\x11\x05\x83\x53\x82\xf0\x32\x07\x1d\x6a\x41\x9f\x64\x20\x6a\xf1\x48\xdd\xe7\xa5\x4a\x16\xd1\x2c\x07\xcd\x1a\xe7\xfe\xbd\x18\xff\x31\x5e\xf2\x58\x79\x98\xbc\xf2\x57\xe8\x68\xad\x5f\xcf\x8d\xbe\xd0\xdb\x9f\x91\xf7\xda\x02\x65\xc2\xed\xc3\x1e\xdf\x1c\xee\x9e\x5a\xda\xc0\x49\xe6\x1c\xd8\xe1\x39\xdd\x5c\x6f\x93\x5e\x3a\x20\xce\x95\xeb\x67\xd6\xb6\xb5\xf8\x0a\x00\x00\xff\xff\xae\x05\x8e\x27\x43\x01\x00\x00")

func templatesNetworkVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkVarsTf,
		"templates/network-vars.tf",
	)
}

func templatesNetworkVarsTf() (*asset, error) {
	bytes, err := templatesNetworkVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network-vars.tf", size: 323, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6e\xc2\x30\x0c\xbe\xf7\x29\xac\xb0\xeb\xb2\x52\xb1\x23\xcf\x12\x85\xc6\x83\x88\x92\x54\x4e\x0a\x4c\xa8\xef\x3e\x25\x4d\x4b\x58\x07\xd5\x7a\xaa\x6c\xcb\xfe\xfe\xb2\x02\x83\xfe\x62\xe9\xe8\x0a\x42\x67\x3b\xaa\x11\x98\x6d\xd1\x38\x2f\xeb\xa3\x48\x4d\x6d\xf6\xe3\xaf\x38\x57\x0c\xd8\xce\xba\x03\x83\x5b\x01\x40\xb8\xd7\xd6\xc0\xf8\x6d\x81\xbd\xdd\xce\x92\xf8\x50\x17\x46\x9e\xb0\x67\x05\x40\xf8\x01\xc8\xe7\xe2\x8e\x02\x40\xaa\x93\x36\xc2\x79\xe9\x51\x74\x6d\xe8\x78\xea\x90\x15\x7d\xb1\x04\xc9\x75\x3b\x83\xfe\x8e\x28\x15\xfe\x04\xf6\x0a\x5a\x62\xa6\x55\x3e\xb9\x20\x02\x0f\x07\xb9\x56\x71\x43\xad\x15\x01\x3c\xde\x5a\x97\xbc\xe4\x6b\x5e\x7e\x54\x9b\x30\xa2\x5b\x71\x46\x72\x77\x48\x5b\xd8\xcc\x65\x99\x84\x09\x54\xa2\x38\x4d\x63\x6b\xe9\x03\xde\xd6\xda\xc6\xc1\x36\x92\x03\x70\x5e\x92\xcf\xee\x54\x65\xc9\x62\x03\x8d\x7a\x00\x50\x7d\xc6\xfb\x7d\x01\xb0\x97\x1e\x2f\xf2\x5b\xe8\x76\x06\x73\x1d\x66\xd0\xc8\x5d\x83\x42\x1d\xea\x76\xea\x0f\x5e\x00\x28\xe3\xa2\x62\x0e\x29\xf0\xc8\xe4\xfc\xd5\xe9\xa3\x73\x2b\x20\xdb\x79\xa4\x45\x0f\x87\xb1\xcc\xc3\xa1\xf0\x6f\x0f\x9f\xe8\xf8\x9e\xd6\xcd\x73\xf6\xc0\x0e\xaf\x1e\xc9\xc8\x46\x64\x59\x98\x6e\xe1\xd5\x87\xba\x88\x66\x2f\xa7\x32\x31\xd2\xc6\x23\x7d\xc9\x1a\x33\x6e\xad\xa5\x59\x3a\x9f\x52\x1a\xf7\xa8\x17\x79\x9c\xd4\xe3\x99\x76\x63\x2a\xd3\xf3\x78\xb9\x60\x7a\x42\x3c\x7b\x40\x3c\x31\xfd\x09\x00\x00\xff\xff\x73\xd9\xed\x39\x1d\x04\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 1053, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xd4\x40\x0c\x86\xef\x79\x0a\x93\x5e\x40\x45\xda\x27\xe0\x50\xf5\x84\x54\x09\x44\xc4\x39\x72\x27\x4e\x63\x76\x62\x8f\x3c\x9e\xdd\x02\xe2\xdd\x51\x92\x82\xb2\x4b\x50\x73\x4d\xbe\xff\xf3\x3f\xe3\xa9\x6e\x00\x43\xa0\x9c\x21\xa8\x5a\xc7\x82\x4e\xf9\x10\x8c\x3a\x12\x67\x8c\xb9\x3a\xa1\x31\x3e\x46\x82\x1a\x8b\x0f\x6d\xb1\x58\xc3\xcf\x0a\xa0\xa3\x1c\x8c\x93\xb3\x0a\x7c\x80\xfa\xae\xf8\x30\x45\x02\xce\x5f\x48\xba\xa4\x2c\x0e\x5f\xbf\x3c\x40\xaf\x06\x9f\x12\x49\xe3\x18\x8e\x90\x4c\x4f\xdc\x91\xc1\x5b\x95\xf8\x1d\x72\x18\x68\xa4\xdb\x41\xb3\xdf\x26\x35\x7f\x0f\x8f\xc5\xe1\xcc\x3e\x68\x71\x48\xe8\xc3\x9b\x77\x75\xf5\xab\x5a\x15\x29\x99\xac\x15\x1c\x69\xb3\xc9\x6a\x12\x27\x8a\x2c\x04\x4e\x61\x10\x0e\x18\x61\x8a\xc2\x1c\xbd\x54\x26\xcc\xf9\xac\xd6\xbd\x62\x9c\xe3\x7f\xd9\x4b\x45\xa7\x23\xb2\xec\xe9\xb5\x90\x5b\x35\x9c\x04\xc5\x77\x9d\xcd\xf4\x1b\x05\x3f\x2c\x89\x2d\x17\x4b\xa6\x50\x6c\x5b\xd4\x1c\x39\x41\xd3\x3c\xc0\x89\x8c\xfb\x97\xad\xd5\x33\xd7\x63\x89\x3e\x31\x3d\xc6\x7c\x2d\x0d\x18\xc8\xbc\xed\x39\x6e\x7b\xef\x4b\x76\x1d\xe1\xfe\x0e\x26\x6e\x31\xd3\x95\x77\x56\xde\x00\x3d\x3b\x99\x60\x04\x21\x3f\xab\x1d\xd7\x2f\x70\x35\x91\x9e\xbd\x15\xda\x75\x27\xff\x18\xa7\x0c\xb8\x82\xd1\x13\x67\x27\x83\x3e\x2a\x3a\xcb\x13\x7c\xfc\xfc\xd2\x62\xfa\xa5\x72\xf8\xa1\x42\xff\x29\xb0\x10\x7b\xe6\x2f\xe4\x9f\x5d\xfc\x0e\x00\x00\xff\xff\x77\x2a\x26\x7c\x5b\x03\x00\x00")

func templatesProviderVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderVarsTf,
		"templates/provider-vars.tf",
	)
}

func templatesProviderVarsTf() (*asset, error) {
	bytes, err := templatesProviderVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider-vars.tf", size: 859, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0e\x02\x21\x0c\x85\xe1\x3d\xa7\x68\x88\x6b\x6f\xe0\x59\x26\x0d\xd4\x48\x9c\x29\xa4\xc0\xb8\x98\x70\x77\x63\x23\x23\xd8\xe5\x9f\x2f\xaf\x26\x49\xdc\x83\x27\x01\x1b\x13\x71\x2e\xe8\x9e\x16\x0e\x03\x80\xb5\x3c\x96\x2a\x2b\x7c\xee\x06\xf6\x72\xec\x28\xd7\x5e\x9b\x35\x00\x35\x93\x2c\x8c\x1b\x4d\xe4\xac\x6a\x12\xe6\xfc\x8a\xe2\xe7\x99\x5e\x95\x14\x62\xe4\xf2\x1d\x3a\xc9\x50\x55\xf9\xb8\x61\xe0\x7f\x35\x54\x55\x81\x33\xb9\x2a\x34\xbf\xeb\x55\x89\x43\x47\x52\x96\x7b\x58\xe9\x27\x86\xd8\xac\x69\xef\x00\x00\x00\xff\xff\xdb\x3a\xa3\x7c\x17\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 279, mode: os.FileMode(480), modTime: time.Unix(1549135978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesOutputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xdd\x6e\xc2\x30\x0c\x85\xef\xfb\x14\x51\xb4\xeb\x0a\x90\xb6\x8b\x49\x7b\x96\xc8\xb4\x06\x0c\xa9\x13\xb9\x4e\xc6\x8f\xfa\xee\x13\xab\x58\x8b\x88\x36\xb1\xeb\x73\xbe\xe3\xe4\xd8\x21\x69\x4c\x6a\x6c\x8b\x1b\x48\x5e\xdd\x01\x4f\x8e\xa1\x43\x6b\x2e\x95\x31\x19\x7c\x42\xf3\x61\xec\xcb\x25\x44\xe4\x5e\xa1\x39\xb8\x26\x74\x31\x29\x5e\xad\x11\x48\x5c\x5e\xd5\xeb\xd0\xef\xea\x2b\x36\xd8\x6a\xa8\xaa\x5b\x68\x14\xca\x30\x3a\xff\x91\x37\xa3\x07\x5b\x19\xd3\x23\xf7\xa4\x94\xaf\x01\x2a\x09\xe7\x93\xf0\xa8\x28\x0c\xde\x51\xfc\x65\x12\xa3\x7e\x06\x39\x10\x6f\xdd\xc6\x07\x50\xe2\x2d\xc5\x9f\x79\xd0\xb6\x82\x7d\x7f\xff\x05\x48\xba\x73\x49\xbc\x35\x97\x79\x66\x06\xa9\x6f\xd2\x60\xcd\x30\xf9\xcf\x25\x67\x06\xf2\xb0\x26\x4f\x7a\x72\xe7\xc0\x78\x87\x4c\xef\x8b\x12\xf6\xd8\x68\x21\x41\x91\x81\xd5\x8d\x15\x17\xd9\x36\x74\x40\x5c\x40\x47\xe1\x11\x15\xdc\x52\x28\x01\xa3\x30\x01\x53\xc9\x9c\x1d\xb5\x05\x62\x14\xee\xd2\x5b\x12\x6c\x34\xc8\xed\x98\x9e\x41\x1c\xf1\x7c\x9b\x13\xba\x5c\xd4\x8b\x7a\x59\xbf\xcd\xa9\x7d\xea\xe2\x3a\x1c\xff\x84\x5e\x4b\xd0\xe3\x62\x9f\x3d\x96\xf7\xd5\xea\xbb\xa3\xaf\x00\x00\x00\xff\xff\x8b\x20\xe1\xd0\x48\x03\x00\x00")

func templatesResourcesOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesOutputsTf,
		"templates/resources-outputs.tf",
	)
}

func templatesResourcesOutputsTf() (*asset, error) {
	bytes, err := templatesResourcesOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-outputs.tf", size: 840, mode: os.FileMode(480), modTime: time.Unix(1549194323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\xd1\xa9\x83\x40\x10\x85\xe1\xf7\xad\xe2\xb0\x7d\xdc\xb7\xdb\xc7\x32\xea\xac\x1e\x30\x2a\x3b\x33\x26\x41\xec\x3d\x44\x12\x52\xc0\xf7\xff\xbb\x34\x4a\x37\x2b\xb2\x69\x1f\x8d\xfe\x2c\x63\x5b\x63\x2b\x16\xb5\xf2\x91\x71\x24\x60\x50\xeb\x1b\x37\xe7\xba\xe0\x0f\xf9\x9f\x26\xb7\x8e\x63\x88\x2b\xbe\x0c\x17\x33\xdc\xe9\x13\x7c\xa2\xe1\x53\xb8\x7c\x95\x98\xfd\x6d\x73\x3a\x53\xfa\x4d\x75\xd9\x0b\x87\x8c\xe3\x4c\xaf\x00\x00\x00\xff\xff\x04\x94\xbf\xe4\x8a\x00\x00\x00")

func templatesResourcesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesVarsTf,
		"templates/resources-vars.tf",
	)
}

func templatesResourcesVarsTf() (*asset, error) {
	bytes, err := templatesResourcesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-vars.tf", size: 138, mode: os.FileMode(480), modTime: time.Unix(1549194381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x41\x6b\xdb\x30\x18\xbd\xfb\x57\x7c\x28\x3d\x74\xd0\xb9\x5d\xa8\x43\x2f\xbb\xec\xb2\xed\xb4\x41\xaf\x03\xa1\x28\x9f\xdd\x8f\x38\x92\xf8\x24\x65\x31\xc1\xff\x7d\xc8\xb2\xd8\x5a\xd2\xb5\xb0\xb2\xd2\xe4\x22\x3f\x3f\xbf\xef\xbd\x67\x61\x2d\x60\x8b\x03\x38\x45\xec\x2b\x46\x6f\x23\x6b\x04\x61\x1d\x1a\x1f\x94\xde\x4a\x6d\x77\x2e\x06\x94\x5b\x1c\x12\x49\xee\x97\x02\xc4\xda\xfa\x3b\x01\xc7\x0a\x80\xb1\x23\x6b\x20\xfd\x3e\x82\x38\x3b\xee\x15\xd7\x19\x93\x46\xed\x70\x14\x15\x40\x5a\x00\x14\x4e\x7a\xf6\x7d\x26\x06\x34\xca\x84\xdf\xc4\x05\xb8\xb8\xee\x49\xa7\x61\x59\x8e\xd1\xf5\x4a\xe3\xb9\x38\x3b\xb6\xd4\xe3\xb9\xa8\xeb\xcb\x24\x50\xbb\xb8\x16\xef\x46\x71\x21\x7e\x18\x71\x21\xd2\xb2\x1a\xab\x6a\x01\x1e\x75\x64\x0a\x03\x74\x6c\xa3\x3b\x1d\xc9\x60\xf8\x69\x79\x4b\xa6\x93\x1e\xf5\x44\xcc\xb1\xca\xd5\xbd\x68\x7f\x8f\x35\x07\xca\x8c\x32\x5c\x66\x4d\x1f\xdb\x96\x0e\x13\x77\x83\x5e\x33\xb9\x30\x0b\x7e\xfa\x76\xfb\x05\x6e\x8b\xd5\xcf\xd3\xcc\xe4\xff\xb9\x6e\x39\xf6\x78\xdf\x72\x86\xae\x9f\xe7\x7c\x43\x8c\xba\x78\x21\xd3\x31\x7a\x9f\x70\x0c\x77\xc8\x61\x70\x53\xac\xaf\xdf\xf7\xd7\x09\x74\x6c\x83\xd5\xb6\x4f\x58\xd0\x6e\x82\x2c\x07\xc9\xca\x74\x28\x77\x94\x44\x96\xcb\x07\xa8\x3a\x14\x94\x71\x67\x03\x4a\x72\xd2\x31\xb6\x94\x70\x71\x55\x4f\xff\xcb\xab\x24\xf6\xa0\x34\xda\x64\xdf\x4f\xbd\xae\xba\xac\x6b\xda\x8c\x2f\x52\xde\xea\x95\xca\x5b\xdd\xac\x6e\x4e\xd5\x37\xe3\x6f\xa7\xc0\xe6\xb5\x76\x5f\xd3\x34\xcd\xc9\x0d\x38\xdf\x78\x3b\x15\x7e\xf8\x3f\x15\xce\x85\xfc\x53\xda\x17\x6c\x6d\x01\x6d\x6f\x55\x20\xd3\x01\x3d\xfd\xcd\x2e\x5c\x72\x8f\x1c\x46\x8f\xd6\xe6\xac\xed\xff\x3c\xa8\xf0\x10\x92\x70\x21\x8c\xd5\xaf\x00\x00\x00\xff\xff\x30\x95\x59\x89\x0d\x07\x00\x00")

func templatesResourcesTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesTf,
		"templates/resources.tf",
	)
}

func templatesResourcesTf() (*asset, error) {
	bytes, err := templatesResourcesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources.tf", size: 1805, mode: os.FileMode(480), modTime: time.Unix(1549193765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/network-outputs.tf": templatesNetworkOutputsTf,
	"templates/network-vars.tf": templatesNetworkVarsTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/provider-vars.tf": templatesProviderVarsTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resources-outputs.tf": templatesResourcesOutputsTf,
	"templates/resources-vars.tf": templatesResourcesVarsTf,
	"templates/resources.tf": templatesResourcesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"network-outputs.tf": &bintree{templatesNetworkOutputsTf, map[string]*bintree{}},
		"network-vars.tf": &bintree{templatesNetworkVarsTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"provider-vars.tf": &bintree{templatesProviderVarsTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resources-outputs.tf": &bintree{templatesResourcesOutputsTf, map[string]*bintree{}},
		"resources-vars.tf": &bintree{templatesResourcesVarsTf, map[string]*bintree{}},
		"resources.tf": &bintree{templatesResourcesTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

