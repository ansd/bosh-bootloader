// Code generated by go-bindata.
// sources:
// templates/provider-vars.tf
// templates/provider.tf
// templates/resources-outputs.tf
// templates/resources-vars.tf
// templates/resources.tf
// DO NOT EDIT!

package openstack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesProviderVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xc1\x6a\xe3\x30\x10\x06\xe0\xbb\x9f\x62\xd6\x7b\xd9\x25\x0b\x79\x82\x3d\x84\x5c\x03\x85\x9a\x9e\xc3\x44\x1e\xa3\x69\xe4\x19\x31\x1a\x25\x94\xd2\x77\x2f\x76\x4a\x49\x82\xa1\xb9\x8a\xff\xff\xf4\x0b\xfd\x06\x0c\x81\x4a\x81\xa0\x6a\x3d\x0b\x3a\x95\x75\x30\xea\x49\x9c\x31\x95\xe6\x84\xc6\x78\x48\x04\x2d\x56\x8f\xfb\x6a\xa9\x85\xf7\x06\xa0\xa7\x12\x8c\xb3\xb3\x0a\xfc\x87\x76\x53\x3d\x4e\x95\x80\xf3\x09\x49\x9f\x95\xc5\xe1\xe5\x79\x07\x83\x1a\x3c\x65\x92\xce\x31\x1c\x21\x9b\x9e\xb8\x27\x83\x3f\x2a\xe9\x0d\x4a\x88\x34\xd2\x2a\x6a\xf1\x55\x56\xf3\x7f\x70\xa8\x0e\x67\xf6\xa8\xd5\x21\xa3\xc7\x5f\x7f\xdb\xe6\xa3\xb9\x1a\x52\x0b\xd9\x5e\x70\xa4\xc5\x25\x57\x37\x71\xa6\xc4\x42\xe0\x14\xa2\x70\xc0\x04\x53\x15\xe6\xea\x2d\x99\xb1\x94\xb3\x5a\xff\x83\x38\xd7\xbf\xb3\xb7\x44\xaf\x23\xb2\x3c\xb2\xeb\x92\x5c\x9a\xe1\x24\x28\xfe\xd0\xdb\x4c\x5f\x29\xf8\xfa\xd2\x58\xb2\x58\x0a\x85\x6a\xcb\x50\x77\xe4\x0c\x5d\xb7\x83\x13\x19\x0f\x5f\xbf\xd6\xce\xb9\x01\x6b\xf2\x29\x33\x60\x2a\xf7\x68\xc0\x40\xe6\xfb\x81\xd3\xb2\xbb\xad\xc5\x75\x84\xed\x06\xa6\xdc\x45\xa6\x3b\x77\x22\x3f\x03\x00\x00\xff\xff\x47\xcf\xad\x74\x77\x02\x00\x00")

func templatesProviderVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderVarsTf,
		"templates/provider-vars.tf",
	)
}

func templatesProviderVarsTf() (*asset, error) {
	bytes, err := templatesProviderVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider-vars.tf", size: 631, mode: os.FileMode(480), modTime: time.Unix(1549295905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x0e\x02\x21\x0c\x85\xe1\x3d\xa7\x68\x88\x6b\x6f\xe0\x59\x26\x0d\xd4\x48\x9c\x29\xa4\xc0\xb8\x98\x70\x77\x63\x23\x23\xd8\xe5\x9f\x2f\xaf\x49\xe2\x1e\x3c\x09\xd8\x98\x88\x73\x41\xf7\xb4\x70\x18\x00\xac\xe5\xb1\x54\x59\xe1\x73\x37\xb0\x97\x63\x47\xb9\xf6\xda\xac\x01\xa8\x99\x64\x61\xdc\x68\x22\x67\x55\x93\x30\xe7\x57\x14\x3f\xcf\xf4\xaa\xa4\x10\x23\x97\xef\xd0\x49\x86\xaa\xca\xc7\x0d\x03\xff\xab\xa1\xaa\x0a\x9c\xc9\x55\xa1\xf9\x5d\xaf\x4a\x1c\x3a\x92\xb2\xdc\xc3\x4a\x3f\x31\xc4\x66\x4d\x33\xef\x00\x00\x00\xff\xff\x54\x73\x4c\x37\x17\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 279, mode: os.FileMode(480), modTime: time.Unix(1549295712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesOutputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xcf\x8a\xdb\x30\x10\xc6\xef\x7e\x0a\x61\x7a\x68\xa1\x98\x24\xd0\x1e\x0a\x7d\x92\x52\xc4\xd8\x9e\x75\x26\xb1\x25\x31\x1a\x29\x9b\x5d\xf2\xee\x45\xb5\xbd\x89\x77\x95\x36\x6d\xf6\x16\x33\xf3\xfd\xbe\xf9\x67\xc7\x06\x71\x41\x54\xd9\xe2\x03\x84\x5e\xf4\x1e\x8f\xda\xc0\x80\xa5\x7a\x2e\x94\x8a\xd0\x07\x54\xdf\x55\xf9\xe1\xd9\x3a\x34\x5e\xa0\xd9\xeb\xc6\x0e\x2e\x08\xa6\x54\x07\xc4\x3a\x6e\xaa\xda\xfa\x6d\x95\x64\xa7\xb2\x38\x15\xc5\x0c\x75\x4c\x11\xc6\xcc\xff\xe0\x5d\xa8\x4f\x65\xa1\x94\x47\xe3\x49\x28\x26\x80\x70\xc0\x4b\x27\x7c\x14\x64\x03\xbd\x26\xf7\x07\x27\x83\x72\xb0\xbc\x27\xd3\xe9\x87\xde\x82\x90\xe9\xc8\x25\xbf\x5d\x5d\x41\xdb\x32\x7a\xbf\x6c\x20\x0e\x5e\x7b\x6c\x02\x93\x1c\x75\xc7\x36\x38\xbf\xc4\xff\xb8\xc6\xf7\xd8\xfc\xce\x4f\xf4\x38\xf8\x69\x38\x3f\x2f\xe1\xbb\x30\xb8\xda\x3e\x6a\x3d\xcf\xfe\x7e\xa7\x5d\x9d\x33\x6a\x89\xb1\x11\xcb\xef\xe9\x74\xb1\xf1\x85\x17\x99\x69\x11\x0d\xb5\x7c\xdb\x2a\x7c\xa8\x0d\xca\x0c\x9d\x1e\xab\xa4\x5f\x2e\xe3\x05\xdd\x1d\xee\x01\x77\x20\x78\x80\xa3\x26\xb7\xc4\xa7\x54\x6a\x6f\x23\x4f\x3f\x5f\x06\x41\xed\x95\x52\x33\xe7\x98\x1a\xdb\x5a\x2f\x1f\xff\x71\x18\x9f\xd5\x7a\xf5\x69\x69\xc3\x36\x08\xf2\xcd\x55\x4f\xe9\x33\x7b\x7c\x7c\x53\xfb\xf9\x5a\xae\x77\xb1\x5e\x55\xab\x6a\x5d\x7d\x2d\xb3\xf7\xfc\x57\xdd\x97\xac\x2e\x70\x7f\xe7\xbb\xfb\x6d\xb3\x59\x90\x21\xc8\x36\x8b\x8d\xc0\xd5\x1c\x5c\x76\x0f\x4f\xf9\xe4\x08\xd4\x43\x4d\x7d\x7a\x69\x9e\xac\x79\xf5\xa1\x3b\x97\xe9\xd8\xee\xb0\x91\x2c\x44\xd0\x80\x11\xfd\xf6\x3b\x79\x96\xb7\x76\x00\x32\x59\xf5\x18\xca\xa8\x19\x3b\xb2\x79\xcd\x18\xca\x68\xd0\xc4\xdc\xd9\x24\xcd\x18\xba\x72\x13\xd9\xbf\x86\x57\xaa\x5f\x01\x00\x00\xff\xff\xdc\x6a\x0a\x6b\x53\x06\x00\x00")

func templatesResourcesOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesOutputsTf,
		"templates/resources-outputs.tf",
	)
}

func templatesResourcesOutputsTf() (*asset, error) {
	bytes, err := templatesResourcesOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-outputs.tf", size: 1619, mode: os.FileMode(480), modTime: time.Unix(1549297079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x4a\x03\x31\x10\x86\xef\x79\x8a\x9f\x3c\x80\x67\x2f\xbd\x79\x29\x88\x16\x7a\x14\x59\xa6\xbb\xb3\x65\x68\x9c\x2c\x93\xe9\xda\x2a\xbe\xbb\x64\x17\xa5\x2e\x82\x96\xdc\x26\xdf\xfc\x7f\xf2\x8d\x64\x42\xbb\xc4\x88\xac\x63\x23\x5d\xc4\xfb\x47\x08\x17\xd3\x93\x37\xca\x3e\xdf\x04\xa0\xe3\xd2\x9a\x0c\x2e\x59\xb1\x42\x7c\x1c\x58\xb7\x4e\xed\x01\x7c\x72\x36\xa5\x04\x65\x7f\xcd\x76\x80\x74\xf0\x8c\xd6\x98\x9c\x61\xf9\xe8\x6c\x10\x75\xb6\x9e\x5a\xc6\x90\xcd\x63\xf8\x51\x45\x23\x49\xa2\x9d\x24\xf1\x73\xf3\x96\x95\xff\x68\xbc\xe4\x51\x79\x28\xbd\xf0\x22\xb4\xd3\xd2\xd4\x71\x61\x1b\xd9\xca\xaf\x91\xf7\x52\x1c\xb9\xc7\xdd\xc3\x16\x33\x87\xf5\xa6\xc4\x09\xec\xe9\x98\x1c\x2b\x3c\xc5\xdb\x9b\xe9\xc4\xe7\x00\xf8\x79\xe0\xba\x99\xa4\x2c\x7f\xf1\x25\x6c\x7a\xcb\x95\xca\xea\x4e\x95\x66\xbc\x97\x52\x7d\xf5\x29\x93\x8b\xee\xb1\xde\x2c\x6a\x2a\x92\xf5\x3f\x2d\x33\xf9\xed\xe6\x33\x00\x00\xff\xff\xe0\x14\x40\x4e\xf1\x01\x00\x00")

func templatesResourcesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesVarsTf,
		"templates/resources-vars.tf",
	)
}

func templatesResourcesVarsTf() (*asset, error) {
	bytes, err := templatesResourcesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources-vars.tf", size: 497, mode: os.FileMode(480), modTime: time.Unix(1549295885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResourcesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x94\x3d\xec\x1e\xa2\x3a\xae\x9d\xf8\x92\x83\xd3\x02\x6d\x17\x68\xb7\xd8\x34\x8b\xbd\x09\xfa\x98\x28\x4c\x24\x92\x18\x52\x6a\x8c\xc2\xff\x7d\x41\x8a\xf2\x47\xcc\xd8\x8a\xb3\x1b\xc7\x8b\xe6\xe4\x0c\xc7\xc3\x37\xef\xbd\xa1\x44\x1f\xc1\x1d\x4e\x41\xc6\x8c\x54\x8f\x50\x89\x8a\x52\x84\x40\x48\xe4\x4a\xc7\xe9\x5d\x94\x8a\x52\x56\x1a\xa3\x3b\x9c\x9a\xa4\xa8\x1e\x04\x10\x24\x42\xdd\x04\xf0\xa3\x07\x40\x98\x33\xc1\xc1\xfc\x9d\x43\xf0\xcb\x8f\x3a\xa6\xb0\x89\x45\x3c\x2e\x71\x16\xf4\x00\xcc\x07\x80\xd5\x1c\xe4\x75\xc4\xb2\xd9\xb1\x2b\x1b\xf4\x66\xbd\xde\x11\x70\xd4\xdf\x05\xdd\xf9\x91\xb8\x45\xc6\xf3\xf6\xe3\x06\x30\x5d\x01\x79\x41\xb9\xf2\x26\x35\xce\x4a\xc6\x23\xa5\x63\x8d\x51\x25\x4d\xaa\xa6\x0a\x2d\xdc\x2d\x18\x55\x95\x70\xd4\x0b\x88\x2e\xe0\x45\xba\x09\xab\x6b\x95\x65\xcb\x99\x5b\x58\x09\xcd\x86\x21\xcb\x6c\x85\x94\x65\x04\xb0\xba\xd7\x49\x3f\xec\x87\x27\x61\xff\xcd\x60\x68\x52\x98\x8c\x6a\x24\xb5\x80\x74\x0e\xc3\x75\x9e\x3c\x4c\xb9\x9e\x0c\x51\x45\x21\xd2\x58\x1b\xec\x52\x88\x42\xc1\xb9\x6d\x14\x40\xe9\x98\xf4\xd2\x9e\x83\x7e\x3f\xb0\x0b\xc8\xb3\x15\x30\x83\x91\xc5\x32\xeb\x01\xe4\xb1\xc6\xef\xf1\x34\x62\x72\x0d\xf2\x89\xc9\x41\x1e\x27\x05\x46\xd9\x4d\x2a\xe7\xeb\x8d\x2e\x00\x19\x57\x96\x3d\x85\x64\x7a\x5a\x02\xfd\x60\x65\xe6\x4c\x47\xa2\xd2\x48\xdb\xe4\x6c\xb2\x96\xe4\x6c\x02\x4f\x96\x73\x2b\xa5\xae\xee\xba\xf7\x56\xba\xc4\x7b\x8d\xc4\xe3\x22\x5a\xf2\xc7\xa2\xd4\xbd\x36\xf1\xc8\x1a\x60\xbb\x53\x5d\x6b\x8c\x6b\xa4\xeb\x38\xc5\xa5\x26\xa5\xa0\x35\xc7\x3e\xda\x5b\x5b\x27\xdb\xe0\xd1\x39\x8d\xe1\x12\x89\xad\x53\xdd\xc8\x6c\x2c\x30\x1f\xab\x70\x69\xa8\xc2\xb6\xd3\x23\xb8\x2e\x44\xac\x19\xcf\x81\xc9\xad\xc7\x48\x9b\x6b\xec\x6f\x5a\xbe\x4d\x56\x7a\x7d\xb4\x51\x63\xf0\x15\xe9\x1c\xdf\x2e\xc1\xe2\x50\x98\x56\xc4\xf4\x14\x72\x12\xd5\x76\x28\x0a\x53\x9b\xf8\x34\x20\xd6\x4d\x6b\x0e\xba\x4d\xec\x1c\xa0\x4a\x89\x49\xed\x0a\xfc\x5e\x95\x32\x11\xf7\x70\xd9\xe2\xfa\x60\xb6\x33\x60\xbb\x22\xa3\xaa\xc0\x16\x5e\xf3\xcf\x49\x83\xf2\xc1\x4e\x13\x3e\x15\x1c\x41\x0b\x98\xef\x79\xf9\x31\xe8\xd0\x4d\xc6\x08\xd3\xb6\x0a\xe3\x39\xa1\x52\xd6\xeb\xfa\x06\x49\x4f\xa5\x6d\xf5\xd3\xd7\xda\x1e\x13\x92\x84\x16\xa9\x28\xec\x50\xa4\xb2\x91\x85\x74\x44\x31\xcf\x31\x2a\x99\x29\x32\x18\x3c\x88\xc6\xf7\x6d\x94\xb0\x14\x1a\x23\x26\x23\x49\x78\xcd\x4c\x3c\x30\x07\x4c\x3f\xec\xbf\xb1\xe7\x53\xab\x5f\xd4\x34\xbf\xd9\x93\x0b\xf1\xc2\xdb\xa4\x35\xe3\xee\xbc\x0e\x3a\xf2\x3a\xc9\x91\x6b\xf8\xf5\x5a\x10\x98\x61\x80\x94\x30\xd6\x78\x8c\xbc\x86\xe3\x0c\x6e\x9b\xac\xdf\xf6\x42\xfd\xe9\xf8\x74\xec\x23\xdf\xc5\x5f\x80\xfe\xa7\x4d\xdc\xe2\x25\xe2\x01\xeb\x17\x7f\x5c\x7e\x84\xf7\x96\x1e\x41\x6b\xd3\xb3\xeb\x88\xda\xed\x76\xf2\x48\x73\x6c\x3e\x3e\x7d\xad\x37\xb4\x58\xa0\xfe\xf2\xe1\xd3\x97\xbf\xf7\x33\x81\xa3\xd1\x68\xe4\x1d\x42\xb7\xe0\x8c\xb0\xa3\xca\xbb\xfb\x64\xf1\x82\xf4\x3c\x11\xfc\xa3\xea\x13\xe1\xf3\xc5\xd5\xe5\x2b\x1e\xc5\x83\x55\xe0\x6d\x67\x05\x5e\xef\x63\xe8\x60\xc9\x1f\x76\x26\xff\x6a\x32\xd9\x0b\xf9\xe3\xe1\xf0\xad\x8f\x7e\x17\x3f\x74\x01\x46\x9d\x05\x78\x47\x98\xdd\x54\xc9\x7e\x44\x18\x0f\x87\x5e\x11\x9a\xf8\xa1\x8b\x70\xfa\xf8\x9b\x43\x86\xb2\x10\x53\xcc\xe0\xaf\xcf\x6a\xf5\x99\x3c\xf9\xb6\x9f\xc7\xc1\x70\xe0\x3f\x8f\x5c\x7c\x37\x2d\xea\x52\xbd\x16\x31\xce\x76\x10\xe3\x4f\xcc\x99\xd2\x34\xdd\xd3\x3b\xd2\xd9\xd9\x99\xff\x1d\xa9\x59\x38\x78\x49\xc6\x3b\x48\x72\x51\x88\x44\x69\x41\xb8\x27\x4d\x06\xa3\xbe\x5f\x93\x66\xe1\x55\x68\xf2\xb4\x2b\x4e\x5d\xaa\xe7\xfc\xaa\x60\xbe\xde\x45\xc4\x7f\xe3\x07\x86\xba\x54\x9b\xee\x38\x5e\xe7\xac\x07\xbf\xbd\xfb\xfa\x12\xe6\xd9\x9b\x15\xe6\x25\x9e\x45\xb1\xff\x06\xd3\x91\xe2\xab\xf7\xff\x2d\xc5\x55\xf6\x7f\xa0\x78\xeb\x15\xc5\x33\x45\x3f\xef\x2a\x1e\x0d\x7a\xff\x04\x00\x00\xff\xff\xb5\xa9\x18\xbc\xae\x1a\x00\x00")

func templatesResourcesTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResourcesTf,
		"templates/resources.tf",
	)
}

func templatesResourcesTf() (*asset, error) {
	bytes, err := templatesResourcesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resources.tf", size: 6830, mode: os.FileMode(480), modTime: time.Unix(1549354055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/provider-vars.tf": templatesProviderVarsTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resources-outputs.tf": templatesResourcesOutputsTf,
	"templates/resources-vars.tf": templatesResourcesVarsTf,
	"templates/resources.tf": templatesResourcesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"provider-vars.tf": &bintree{templatesProviderVarsTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resources-outputs.tf": &bintree{templatesResourcesOutputsTf, map[string]*bintree{}},
		"resources-vars.tf": &bintree{templatesResourcesVarsTf, map[string]*bintree{}},
		"resources.tf": &bintree{templatesResourcesTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

